
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>
/**
 * Model salones
 * 
 */
export type salones = $Result.DefaultSelection<Prisma.$salonesPayload>
/**
 * Model dispositivos
 * 
 */
export type dispositivos = $Result.DefaultSelection<Prisma.$dispositivosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuarios.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuarios.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs>;

  /**
   * `prisma.salones`: Exposes CRUD operations for the **salones** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salones
    * const salones = await prisma.salones.findMany()
    * ```
    */
  get salones(): Prisma.salonesDelegate<ExtArgs>;

  /**
   * `prisma.dispositivos`: Exposes CRUD operations for the **dispositivos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dispositivos
    * const dispositivos = await prisma.dispositivos.findMany()
    * ```
    */
  get dispositivos(): Prisma.dispositivosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usuarios: 'usuarios',
    salones: 'salones',
    dispositivos: 'dispositivos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuarios' | 'salones' | 'dispositivos'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
      salones: {
        payload: Prisma.$salonesPayload<ExtArgs>
        fields: Prisma.salonesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.salonesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.salonesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>
          }
          findFirst: {
            args: Prisma.salonesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.salonesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>
          }
          findMany: {
            args: Prisma.salonesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>[]
          }
          create: {
            args: Prisma.salonesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>
          }
          createMany: {
            args: Prisma.salonesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.salonesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>
          }
          update: {
            args: Prisma.salonesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>
          }
          deleteMany: {
            args: Prisma.salonesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.salonesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.salonesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$salonesPayload>
          }
          aggregate: {
            args: Prisma.SalonesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSalones>
          }
          groupBy: {
            args: Prisma.salonesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SalonesGroupByOutputType>[]
          }
          count: {
            args: Prisma.salonesCountArgs<ExtArgs>,
            result: $Utils.Optional<SalonesCountAggregateOutputType> | number
          }
        }
      }
      dispositivos: {
        payload: Prisma.$dispositivosPayload<ExtArgs>
        fields: Prisma.dispositivosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dispositivosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dispositivosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>
          }
          findFirst: {
            args: Prisma.dispositivosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dispositivosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>
          }
          findMany: {
            args: Prisma.dispositivosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>[]
          }
          create: {
            args: Prisma.dispositivosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>
          }
          createMany: {
            args: Prisma.dispositivosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.dispositivosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>
          }
          update: {
            args: Prisma.dispositivosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>
          }
          deleteMany: {
            args: Prisma.dispositivosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.dispositivosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.dispositivosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispositivosPayload>
          }
          aggregate: {
            args: Prisma.DispositivosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDispositivos>
          }
          groupBy: {
            args: Prisma.dispositivosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DispositivosGroupByOutputType>[]
          }
          count: {
            args: Prisma.dispositivosCountArgs<ExtArgs>,
            result: $Utils.Optional<DispositivosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SalonesCountOutputType
   */

  export type SalonesCountOutputType = {
    dispositivos: number
  }

  export type SalonesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dispositivos?: boolean | SalonesCountOutputTypeCountDispositivosArgs
  }

  // Custom InputTypes

  /**
   * SalonesCountOutputType without action
   */
  export type SalonesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalonesCountOutputType
     */
    select?: SalonesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SalonesCountOutputType without action
   */
  export type SalonesCountOutputTypeCountDispositivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dispositivosWhereInput
  }



  /**
   * Models
   */

  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    idusuario: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    idusuario: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    idusuario: number | null
    nombre: string | null
    correo: string | null
    clave: string | null
    imagen: string | null
  }

  export type UsuariosMaxAggregateOutputType = {
    idusuario: number | null
    nombre: string | null
    correo: string | null
    clave: string | null
    imagen: string | null
  }

  export type UsuariosCountAggregateOutputType = {
    idusuario: number
    nombre: number
    correo: number
    clave: number
    imagen: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    idusuario?: true
  }

  export type UsuariosSumAggregateInputType = {
    idusuario?: true
  }

  export type UsuariosMinAggregateInputType = {
    idusuario?: true
    nombre?: true
    correo?: true
    clave?: true
    imagen?: true
  }

  export type UsuariosMaxAggregateInputType = {
    idusuario?: true
    nombre?: true
    correo?: true
    clave?: true
    imagen?: true
  }

  export type UsuariosCountAggregateInputType = {
    idusuario?: true
    nombre?: true
    correo?: true
    clave?: true
    imagen?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    idusuario: number
    nombre: string
    correo: string
    clave: string
    imagen: string
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idusuario?: boolean
    nombre?: boolean
    correo?: boolean
    clave?: boolean
    imagen?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    idusuario?: boolean
    nombre?: boolean
    correo?: boolean
    clave?: boolean
    imagen?: boolean
  }


  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      idusuario: number
      nombre: string
      correo: string
      clave: string
      imagen: string
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }


  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuariosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuariosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `idusuario`
     * const usuariosWithIdusuarioOnly = await prisma.usuarios.findMany({ select: { idusuario: true } })
     * 
    **/
    findMany<T extends usuariosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends usuariosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuariosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends usuariosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuariosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuariosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuariosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends usuariosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>
    ): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuarios model
   */ 
  interface usuariosFieldRefs {
    readonly idusuario: FieldRef<"usuarios", 'Int'>
    readonly nombre: FieldRef<"usuarios", 'String'>
    readonly correo: FieldRef<"usuarios", 'String'>
    readonly clave: FieldRef<"usuarios", 'String'>
    readonly imagen: FieldRef<"usuarios", 'String'>
  }
    

  // Custom InputTypes

  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }


  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }


  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }


  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }


  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
  }


  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }


  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
  }


  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
  }



  /**
   * Model salones
   */

  export type AggregateSalones = {
    _count: SalonesCountAggregateOutputType | null
    _avg: SalonesAvgAggregateOutputType | null
    _sum: SalonesSumAggregateOutputType | null
    _min: SalonesMinAggregateOutputType | null
    _max: SalonesMaxAggregateOutputType | null
  }

  export type SalonesAvgAggregateOutputType = {
    idsalon: number | null
  }

  export type SalonesSumAggregateOutputType = {
    idsalon: number | null
  }

  export type SalonesMinAggregateOutputType = {
    idsalon: number | null
    nombre_salon: string | null
  }

  export type SalonesMaxAggregateOutputType = {
    idsalon: number | null
    nombre_salon: string | null
  }

  export type SalonesCountAggregateOutputType = {
    idsalon: number
    nombre_salon: number
    _all: number
  }


  export type SalonesAvgAggregateInputType = {
    idsalon?: true
  }

  export type SalonesSumAggregateInputType = {
    idsalon?: true
  }

  export type SalonesMinAggregateInputType = {
    idsalon?: true
    nombre_salon?: true
  }

  export type SalonesMaxAggregateInputType = {
    idsalon?: true
    nombre_salon?: true
  }

  export type SalonesCountAggregateInputType = {
    idsalon?: true
    nombre_salon?: true
    _all?: true
  }

  export type SalonesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which salones to aggregate.
     */
    where?: salonesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salones to fetch.
     */
    orderBy?: salonesOrderByWithRelationInput | salonesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: salonesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned salones
    **/
    _count?: true | SalonesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalonesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalonesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalonesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalonesMaxAggregateInputType
  }

  export type GetSalonesAggregateType<T extends SalonesAggregateArgs> = {
        [P in keyof T & keyof AggregateSalones]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalones[P]>
      : GetScalarType<T[P], AggregateSalones[P]>
  }




  export type salonesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: salonesWhereInput
    orderBy?: salonesOrderByWithAggregationInput | salonesOrderByWithAggregationInput[]
    by: SalonesScalarFieldEnum[] | SalonesScalarFieldEnum
    having?: salonesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalonesCountAggregateInputType | true
    _avg?: SalonesAvgAggregateInputType
    _sum?: SalonesSumAggregateInputType
    _min?: SalonesMinAggregateInputType
    _max?: SalonesMaxAggregateInputType
  }

  export type SalonesGroupByOutputType = {
    idsalon: number
    nombre_salon: string
    _count: SalonesCountAggregateOutputType | null
    _avg: SalonesAvgAggregateOutputType | null
    _sum: SalonesSumAggregateOutputType | null
    _min: SalonesMinAggregateOutputType | null
    _max: SalonesMaxAggregateOutputType | null
  }

  type GetSalonesGroupByPayload<T extends salonesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalonesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalonesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalonesGroupByOutputType[P]>
            : GetScalarType<T[P], SalonesGroupByOutputType[P]>
        }
      >
    >


  export type salonesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idsalon?: boolean
    nombre_salon?: boolean
    dispositivos?: boolean | salones$dispositivosArgs<ExtArgs>
    _count?: boolean | SalonesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salones"]>

  export type salonesSelectScalar = {
    idsalon?: boolean
    nombre_salon?: boolean
  }

  export type salonesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dispositivos?: boolean | salones$dispositivosArgs<ExtArgs>
    _count?: boolean | SalonesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $salonesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "salones"
    objects: {
      dispositivos: Prisma.$dispositivosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idsalon: number
      nombre_salon: string
    }, ExtArgs["result"]["salones"]>
    composites: {}
  }


  type salonesGetPayload<S extends boolean | null | undefined | salonesDefaultArgs> = $Result.GetResult<Prisma.$salonesPayload, S>

  type salonesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<salonesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SalonesCountAggregateInputType | true
    }

  export interface salonesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['salones'], meta: { name: 'salones' } }
    /**
     * Find zero or one Salones that matches the filter.
     * @param {salonesFindUniqueArgs} args - Arguments to find a Salones
     * @example
     * // Get one Salones
     * const salones = await prisma.salones.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends salonesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, salonesFindUniqueArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Salones that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {salonesFindUniqueOrThrowArgs} args - Arguments to find a Salones
     * @example
     * // Get one Salones
     * const salones = await prisma.salones.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends salonesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, salonesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Salones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonesFindFirstArgs} args - Arguments to find a Salones
     * @example
     * // Get one Salones
     * const salones = await prisma.salones.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends salonesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, salonesFindFirstArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Salones that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonesFindFirstOrThrowArgs} args - Arguments to find a Salones
     * @example
     * // Get one Salones
     * const salones = await prisma.salones.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends salonesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, salonesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Salones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salones
     * const salones = await prisma.salones.findMany()
     * 
     * // Get first 10 Salones
     * const salones = await prisma.salones.findMany({ take: 10 })
     * 
     * // Only select the `idsalon`
     * const salonesWithIdsalonOnly = await prisma.salones.findMany({ select: { idsalon: true } })
     * 
    **/
    findMany<T extends salonesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salonesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Salones.
     * @param {salonesCreateArgs} args - Arguments to create a Salones.
     * @example
     * // Create one Salones
     * const Salones = await prisma.salones.create({
     *   data: {
     *     // ... data to create a Salones
     *   }
     * })
     * 
    **/
    create<T extends salonesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, salonesCreateArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Salones.
     *     @param {salonesCreateManyArgs} args - Arguments to create many Salones.
     *     @example
     *     // Create many Salones
     *     const salones = await prisma.salones.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends salonesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salonesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Salones.
     * @param {salonesDeleteArgs} args - Arguments to delete one Salones.
     * @example
     * // Delete one Salones
     * const Salones = await prisma.salones.delete({
     *   where: {
     *     // ... filter to delete one Salones
     *   }
     * })
     * 
    **/
    delete<T extends salonesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, salonesDeleteArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Salones.
     * @param {salonesUpdateArgs} args - Arguments to update one Salones.
     * @example
     * // Update one Salones
     * const salones = await prisma.salones.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends salonesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, salonesUpdateArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Salones.
     * @param {salonesDeleteManyArgs} args - Arguments to filter Salones to delete.
     * @example
     * // Delete a few Salones
     * const { count } = await prisma.salones.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends salonesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, salonesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salones
     * const salones = await prisma.salones.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends salonesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, salonesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Salones.
     * @param {salonesUpsertArgs} args - Arguments to update or create a Salones.
     * @example
     * // Update or create a Salones
     * const salones = await prisma.salones.upsert({
     *   create: {
     *     // ... data to create a Salones
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Salones we want to update
     *   }
     * })
    **/
    upsert<T extends salonesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, salonesUpsertArgs<ExtArgs>>
    ): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Salones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonesCountArgs} args - Arguments to filter Salones to count.
     * @example
     * // Count the number of Salones
     * const count = await prisma.salones.count({
     *   where: {
     *     // ... the filter for the Salones we want to count
     *   }
     * })
    **/
    count<T extends salonesCountArgs>(
      args?: Subset<T, salonesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalonesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Salones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalonesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalonesAggregateArgs>(args: Subset<T, SalonesAggregateArgs>): Prisma.PrismaPromise<GetSalonesAggregateType<T>>

    /**
     * Group by Salones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends salonesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: salonesGroupByArgs['orderBy'] }
        : { orderBy?: salonesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, salonesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalonesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the salones model
   */
  readonly fields: salonesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for salones.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__salonesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    dispositivos<T extends salones$dispositivosArgs<ExtArgs> = {}>(args?: Subset<T, salones$dispositivosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the salones model
   */ 
  interface salonesFieldRefs {
    readonly idsalon: FieldRef<"salones", 'Int'>
    readonly nombre_salon: FieldRef<"salones", 'String'>
  }
    

  // Custom InputTypes

  /**
   * salones findUnique
   */
  export type salonesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * Filter, which salones to fetch.
     */
    where: salonesWhereUniqueInput
  }


  /**
   * salones findUniqueOrThrow
   */
  export type salonesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * Filter, which salones to fetch.
     */
    where: salonesWhereUniqueInput
  }


  /**
   * salones findFirst
   */
  export type salonesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * Filter, which salones to fetch.
     */
    where?: salonesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salones to fetch.
     */
    orderBy?: salonesOrderByWithRelationInput | salonesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salones.
     */
    cursor?: salonesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salones.
     */
    distinct?: SalonesScalarFieldEnum | SalonesScalarFieldEnum[]
  }


  /**
   * salones findFirstOrThrow
   */
  export type salonesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * Filter, which salones to fetch.
     */
    where?: salonesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salones to fetch.
     */
    orderBy?: salonesOrderByWithRelationInput | salonesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salones.
     */
    cursor?: salonesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salones.
     */
    distinct?: SalonesScalarFieldEnum | SalonesScalarFieldEnum[]
  }


  /**
   * salones findMany
   */
  export type salonesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * Filter, which salones to fetch.
     */
    where?: salonesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salones to fetch.
     */
    orderBy?: salonesOrderByWithRelationInput | salonesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing salones.
     */
    cursor?: salonesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salones.
     */
    skip?: number
    distinct?: SalonesScalarFieldEnum | SalonesScalarFieldEnum[]
  }


  /**
   * salones create
   */
  export type salonesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * The data needed to create a salones.
     */
    data: XOR<salonesCreateInput, salonesUncheckedCreateInput>
  }


  /**
   * salones createMany
   */
  export type salonesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many salones.
     */
    data: salonesCreateManyInput | salonesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * salones update
   */
  export type salonesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * The data needed to update a salones.
     */
    data: XOR<salonesUpdateInput, salonesUncheckedUpdateInput>
    /**
     * Choose, which salones to update.
     */
    where: salonesWhereUniqueInput
  }


  /**
   * salones updateMany
   */
  export type salonesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update salones.
     */
    data: XOR<salonesUpdateManyMutationInput, salonesUncheckedUpdateManyInput>
    /**
     * Filter which salones to update
     */
    where?: salonesWhereInput
  }


  /**
   * salones upsert
   */
  export type salonesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * The filter to search for the salones to update in case it exists.
     */
    where: salonesWhereUniqueInput
    /**
     * In case the salones found by the `where` argument doesn't exist, create a new salones with this data.
     */
    create: XOR<salonesCreateInput, salonesUncheckedCreateInput>
    /**
     * In case the salones was found with the provided `where` argument, update it with this data.
     */
    update: XOR<salonesUpdateInput, salonesUncheckedUpdateInput>
  }


  /**
   * salones delete
   */
  export type salonesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
    /**
     * Filter which salones to delete.
     */
    where: salonesWhereUniqueInput
  }


  /**
   * salones deleteMany
   */
  export type salonesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which salones to delete
     */
    where?: salonesWhereInput
  }


  /**
   * salones.dispositivos
   */
  export type salones$dispositivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    where?: dispositivosWhereInput
    orderBy?: dispositivosOrderByWithRelationInput | dispositivosOrderByWithRelationInput[]
    cursor?: dispositivosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DispositivosScalarFieldEnum | DispositivosScalarFieldEnum[]
  }


  /**
   * salones without action
   */
  export type salonesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the salones
     */
    select?: salonesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: salonesInclude<ExtArgs> | null
  }



  /**
   * Model dispositivos
   */

  export type AggregateDispositivos = {
    _count: DispositivosCountAggregateOutputType | null
    _avg: DispositivosAvgAggregateOutputType | null
    _sum: DispositivosSumAggregateOutputType | null
    _min: DispositivosMinAggregateOutputType | null
    _max: DispositivosMaxAggregateOutputType | null
  }

  export type DispositivosAvgAggregateOutputType = {
    salonesIdsalon: number | null
  }

  export type DispositivosSumAggregateOutputType = {
    salonesIdsalon: number | null
  }

  export type DispositivosMinAggregateOutputType = {
    iddispositivo: string | null
    nombre_dispositivo: string | null
    salonesIdsalon: number | null
  }

  export type DispositivosMaxAggregateOutputType = {
    iddispositivo: string | null
    nombre_dispositivo: string | null
    salonesIdsalon: number | null
  }

  export type DispositivosCountAggregateOutputType = {
    iddispositivo: number
    nombre_dispositivo: number
    salonesIdsalon: number
    _all: number
  }


  export type DispositivosAvgAggregateInputType = {
    salonesIdsalon?: true
  }

  export type DispositivosSumAggregateInputType = {
    salonesIdsalon?: true
  }

  export type DispositivosMinAggregateInputType = {
    iddispositivo?: true
    nombre_dispositivo?: true
    salonesIdsalon?: true
  }

  export type DispositivosMaxAggregateInputType = {
    iddispositivo?: true
    nombre_dispositivo?: true
    salonesIdsalon?: true
  }

  export type DispositivosCountAggregateInputType = {
    iddispositivo?: true
    nombre_dispositivo?: true
    salonesIdsalon?: true
    _all?: true
  }

  export type DispositivosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dispositivos to aggregate.
     */
    where?: dispositivosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispositivos to fetch.
     */
    orderBy?: dispositivosOrderByWithRelationInput | dispositivosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dispositivosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispositivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispositivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dispositivos
    **/
    _count?: true | DispositivosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DispositivosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DispositivosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispositivosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispositivosMaxAggregateInputType
  }

  export type GetDispositivosAggregateType<T extends DispositivosAggregateArgs> = {
        [P in keyof T & keyof AggregateDispositivos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDispositivos[P]>
      : GetScalarType<T[P], AggregateDispositivos[P]>
  }




  export type dispositivosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dispositivosWhereInput
    orderBy?: dispositivosOrderByWithAggregationInput | dispositivosOrderByWithAggregationInput[]
    by: DispositivosScalarFieldEnum[] | DispositivosScalarFieldEnum
    having?: dispositivosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispositivosCountAggregateInputType | true
    _avg?: DispositivosAvgAggregateInputType
    _sum?: DispositivosSumAggregateInputType
    _min?: DispositivosMinAggregateInputType
    _max?: DispositivosMaxAggregateInputType
  }

  export type DispositivosGroupByOutputType = {
    iddispositivo: string
    nombre_dispositivo: string
    salonesIdsalon: number
    _count: DispositivosCountAggregateOutputType | null
    _avg: DispositivosAvgAggregateOutputType | null
    _sum: DispositivosSumAggregateOutputType | null
    _min: DispositivosMinAggregateOutputType | null
    _max: DispositivosMaxAggregateOutputType | null
  }

  type GetDispositivosGroupByPayload<T extends dispositivosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DispositivosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispositivosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispositivosGroupByOutputType[P]>
            : GetScalarType<T[P], DispositivosGroupByOutputType[P]>
        }
      >
    >


  export type dispositivosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    iddispositivo?: boolean
    nombre_dispositivo?: boolean
    salonesIdsalon?: boolean
    idsalon?: boolean | salonesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dispositivos"]>

  export type dispositivosSelectScalar = {
    iddispositivo?: boolean
    nombre_dispositivo?: boolean
    salonesIdsalon?: boolean
  }

  export type dispositivosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    idsalon?: boolean | salonesDefaultArgs<ExtArgs>
  }


  export type $dispositivosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "dispositivos"
    objects: {
      idsalon: Prisma.$salonesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      iddispositivo: string
      nombre_dispositivo: string
      salonesIdsalon: number
    }, ExtArgs["result"]["dispositivos"]>
    composites: {}
  }


  type dispositivosGetPayload<S extends boolean | null | undefined | dispositivosDefaultArgs> = $Result.GetResult<Prisma.$dispositivosPayload, S>

  type dispositivosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<dispositivosFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DispositivosCountAggregateInputType | true
    }

  export interface dispositivosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dispositivos'], meta: { name: 'dispositivos' } }
    /**
     * Find zero or one Dispositivos that matches the filter.
     * @param {dispositivosFindUniqueArgs} args - Arguments to find a Dispositivos
     * @example
     * // Get one Dispositivos
     * const dispositivos = await prisma.dispositivos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dispositivosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, dispositivosFindUniqueArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dispositivos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dispositivosFindUniqueOrThrowArgs} args - Arguments to find a Dispositivos
     * @example
     * // Get one Dispositivos
     * const dispositivos = await prisma.dispositivos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dispositivosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dispositivosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dispositivos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispositivosFindFirstArgs} args - Arguments to find a Dispositivos
     * @example
     * // Get one Dispositivos
     * const dispositivos = await prisma.dispositivos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dispositivosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, dispositivosFindFirstArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dispositivos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispositivosFindFirstOrThrowArgs} args - Arguments to find a Dispositivos
     * @example
     * // Get one Dispositivos
     * const dispositivos = await prisma.dispositivos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dispositivosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dispositivosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Dispositivos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispositivosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dispositivos
     * const dispositivos = await prisma.dispositivos.findMany()
     * 
     * // Get first 10 Dispositivos
     * const dispositivos = await prisma.dispositivos.findMany({ take: 10 })
     * 
     * // Only select the `iddispositivo`
     * const dispositivosWithIddispositivoOnly = await prisma.dispositivos.findMany({ select: { iddispositivo: true } })
     * 
    **/
    findMany<T extends dispositivosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispositivosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dispositivos.
     * @param {dispositivosCreateArgs} args - Arguments to create a Dispositivos.
     * @example
     * // Create one Dispositivos
     * const Dispositivos = await prisma.dispositivos.create({
     *   data: {
     *     // ... data to create a Dispositivos
     *   }
     * })
     * 
    **/
    create<T extends dispositivosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, dispositivosCreateArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Dispositivos.
     *     @param {dispositivosCreateManyArgs} args - Arguments to create many Dispositivos.
     *     @example
     *     // Create many Dispositivos
     *     const dispositivos = await prisma.dispositivos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dispositivosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispositivosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dispositivos.
     * @param {dispositivosDeleteArgs} args - Arguments to delete one Dispositivos.
     * @example
     * // Delete one Dispositivos
     * const Dispositivos = await prisma.dispositivos.delete({
     *   where: {
     *     // ... filter to delete one Dispositivos
     *   }
     * })
     * 
    **/
    delete<T extends dispositivosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, dispositivosDeleteArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dispositivos.
     * @param {dispositivosUpdateArgs} args - Arguments to update one Dispositivos.
     * @example
     * // Update one Dispositivos
     * const dispositivos = await prisma.dispositivos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dispositivosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, dispositivosUpdateArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Dispositivos.
     * @param {dispositivosDeleteManyArgs} args - Arguments to filter Dispositivos to delete.
     * @example
     * // Delete a few Dispositivos
     * const { count } = await prisma.dispositivos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dispositivosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispositivosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dispositivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispositivosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dispositivos
     * const dispositivos = await prisma.dispositivos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dispositivosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, dispositivosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dispositivos.
     * @param {dispositivosUpsertArgs} args - Arguments to update or create a Dispositivos.
     * @example
     * // Update or create a Dispositivos
     * const dispositivos = await prisma.dispositivos.upsert({
     *   create: {
     *     // ... data to create a Dispositivos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dispositivos we want to update
     *   }
     * })
    **/
    upsert<T extends dispositivosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, dispositivosUpsertArgs<ExtArgs>>
    ): Prisma__dispositivosClient<$Result.GetResult<Prisma.$dispositivosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Dispositivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispositivosCountArgs} args - Arguments to filter Dispositivos to count.
     * @example
     * // Count the number of Dispositivos
     * const count = await prisma.dispositivos.count({
     *   where: {
     *     // ... the filter for the Dispositivos we want to count
     *   }
     * })
    **/
    count<T extends dispositivosCountArgs>(
      args?: Subset<T, dispositivosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispositivosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dispositivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositivosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispositivosAggregateArgs>(args: Subset<T, DispositivosAggregateArgs>): Prisma.PrismaPromise<GetDispositivosAggregateType<T>>

    /**
     * Group by Dispositivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispositivosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dispositivosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dispositivosGroupByArgs['orderBy'] }
        : { orderBy?: dispositivosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dispositivosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispositivosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the dispositivos model
   */
  readonly fields: dispositivosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for dispositivos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dispositivosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    idsalon<T extends salonesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, salonesDefaultArgs<ExtArgs>>): Prisma__salonesClient<$Result.GetResult<Prisma.$salonesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the dispositivos model
   */ 
  interface dispositivosFieldRefs {
    readonly iddispositivo: FieldRef<"dispositivos", 'String'>
    readonly nombre_dispositivo: FieldRef<"dispositivos", 'String'>
    readonly salonesIdsalon: FieldRef<"dispositivos", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * dispositivos findUnique
   */
  export type dispositivosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * Filter, which dispositivos to fetch.
     */
    where: dispositivosWhereUniqueInput
  }


  /**
   * dispositivos findUniqueOrThrow
   */
  export type dispositivosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * Filter, which dispositivos to fetch.
     */
    where: dispositivosWhereUniqueInput
  }


  /**
   * dispositivos findFirst
   */
  export type dispositivosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * Filter, which dispositivos to fetch.
     */
    where?: dispositivosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispositivos to fetch.
     */
    orderBy?: dispositivosOrderByWithRelationInput | dispositivosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dispositivos.
     */
    cursor?: dispositivosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispositivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispositivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dispositivos.
     */
    distinct?: DispositivosScalarFieldEnum | DispositivosScalarFieldEnum[]
  }


  /**
   * dispositivos findFirstOrThrow
   */
  export type dispositivosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * Filter, which dispositivos to fetch.
     */
    where?: dispositivosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispositivos to fetch.
     */
    orderBy?: dispositivosOrderByWithRelationInput | dispositivosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dispositivos.
     */
    cursor?: dispositivosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispositivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispositivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dispositivos.
     */
    distinct?: DispositivosScalarFieldEnum | DispositivosScalarFieldEnum[]
  }


  /**
   * dispositivos findMany
   */
  export type dispositivosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * Filter, which dispositivos to fetch.
     */
    where?: dispositivosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispositivos to fetch.
     */
    orderBy?: dispositivosOrderByWithRelationInput | dispositivosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dispositivos.
     */
    cursor?: dispositivosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispositivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispositivos.
     */
    skip?: number
    distinct?: DispositivosScalarFieldEnum | DispositivosScalarFieldEnum[]
  }


  /**
   * dispositivos create
   */
  export type dispositivosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * The data needed to create a dispositivos.
     */
    data: XOR<dispositivosCreateInput, dispositivosUncheckedCreateInput>
  }


  /**
   * dispositivos createMany
   */
  export type dispositivosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dispositivos.
     */
    data: dispositivosCreateManyInput | dispositivosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * dispositivos update
   */
  export type dispositivosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * The data needed to update a dispositivos.
     */
    data: XOR<dispositivosUpdateInput, dispositivosUncheckedUpdateInput>
    /**
     * Choose, which dispositivos to update.
     */
    where: dispositivosWhereUniqueInput
  }


  /**
   * dispositivos updateMany
   */
  export type dispositivosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dispositivos.
     */
    data: XOR<dispositivosUpdateManyMutationInput, dispositivosUncheckedUpdateManyInput>
    /**
     * Filter which dispositivos to update
     */
    where?: dispositivosWhereInput
  }


  /**
   * dispositivos upsert
   */
  export type dispositivosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * The filter to search for the dispositivos to update in case it exists.
     */
    where: dispositivosWhereUniqueInput
    /**
     * In case the dispositivos found by the `where` argument doesn't exist, create a new dispositivos with this data.
     */
    create: XOR<dispositivosCreateInput, dispositivosUncheckedCreateInput>
    /**
     * In case the dispositivos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dispositivosUpdateInput, dispositivosUncheckedUpdateInput>
  }


  /**
   * dispositivos delete
   */
  export type dispositivosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
    /**
     * Filter which dispositivos to delete.
     */
    where: dispositivosWhereUniqueInput
  }


  /**
   * dispositivos deleteMany
   */
  export type dispositivosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dispositivos to delete
     */
    where?: dispositivosWhereInput
  }


  /**
   * dispositivos without action
   */
  export type dispositivosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispositivos
     */
    select?: dispositivosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: dispositivosInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuariosScalarFieldEnum: {
    idusuario: 'idusuario',
    nombre: 'nombre',
    correo: 'correo',
    clave: 'clave',
    imagen: 'imagen'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const SalonesScalarFieldEnum: {
    idsalon: 'idsalon',
    nombre_salon: 'nombre_salon'
  };

  export type SalonesScalarFieldEnum = (typeof SalonesScalarFieldEnum)[keyof typeof SalonesScalarFieldEnum]


  export const DispositivosScalarFieldEnum: {
    iddispositivo: 'iddispositivo',
    nombre_dispositivo: 'nombre_dispositivo',
    salonesIdsalon: 'salonesIdsalon'
  };

  export type DispositivosScalarFieldEnum = (typeof DispositivosScalarFieldEnum)[keyof typeof DispositivosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    idusuario?: IntFilter<"usuarios"> | number
    nombre?: StringFilter<"usuarios"> | string
    correo?: StringFilter<"usuarios"> | string
    clave?: StringFilter<"usuarios"> | string
    imagen?: StringFilter<"usuarios"> | string
  }

  export type usuariosOrderByWithRelationInput = {
    idusuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    clave?: SortOrder
    imagen?: SortOrder
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    idusuario?: number
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    nombre?: StringFilter<"usuarios"> | string
    correo?: StringFilter<"usuarios"> | string
    clave?: StringFilter<"usuarios"> | string
    imagen?: StringFilter<"usuarios"> | string
  }, "idusuario">

  export type usuariosOrderByWithAggregationInput = {
    idusuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    clave?: SortOrder
    imagen?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    idusuario?: IntWithAggregatesFilter<"usuarios"> | number
    nombre?: StringWithAggregatesFilter<"usuarios"> | string
    correo?: StringWithAggregatesFilter<"usuarios"> | string
    clave?: StringWithAggregatesFilter<"usuarios"> | string
    imagen?: StringWithAggregatesFilter<"usuarios"> | string
  }

  export type salonesWhereInput = {
    AND?: salonesWhereInput | salonesWhereInput[]
    OR?: salonesWhereInput[]
    NOT?: salonesWhereInput | salonesWhereInput[]
    idsalon?: IntFilter<"salones"> | number
    nombre_salon?: StringFilter<"salones"> | string
    dispositivos?: DispositivosListRelationFilter
  }

  export type salonesOrderByWithRelationInput = {
    idsalon?: SortOrder
    nombre_salon?: SortOrder
    dispositivos?: dispositivosOrderByRelationAggregateInput
  }

  export type salonesWhereUniqueInput = Prisma.AtLeast<{
    idsalon?: number
    AND?: salonesWhereInput | salonesWhereInput[]
    OR?: salonesWhereInput[]
    NOT?: salonesWhereInput | salonesWhereInput[]
    nombre_salon?: StringFilter<"salones"> | string
    dispositivos?: DispositivosListRelationFilter
  }, "idsalon">

  export type salonesOrderByWithAggregationInput = {
    idsalon?: SortOrder
    nombre_salon?: SortOrder
    _count?: salonesCountOrderByAggregateInput
    _avg?: salonesAvgOrderByAggregateInput
    _max?: salonesMaxOrderByAggregateInput
    _min?: salonesMinOrderByAggregateInput
    _sum?: salonesSumOrderByAggregateInput
  }

  export type salonesScalarWhereWithAggregatesInput = {
    AND?: salonesScalarWhereWithAggregatesInput | salonesScalarWhereWithAggregatesInput[]
    OR?: salonesScalarWhereWithAggregatesInput[]
    NOT?: salonesScalarWhereWithAggregatesInput | salonesScalarWhereWithAggregatesInput[]
    idsalon?: IntWithAggregatesFilter<"salones"> | number
    nombre_salon?: StringWithAggregatesFilter<"salones"> | string
  }

  export type dispositivosWhereInput = {
    AND?: dispositivosWhereInput | dispositivosWhereInput[]
    OR?: dispositivosWhereInput[]
    NOT?: dispositivosWhereInput | dispositivosWhereInput[]
    iddispositivo?: StringFilter<"dispositivos"> | string
    nombre_dispositivo?: StringFilter<"dispositivos"> | string
    salonesIdsalon?: IntFilter<"dispositivos"> | number
    idsalon?: XOR<SalonesRelationFilter, salonesWhereInput>
  }

  export type dispositivosOrderByWithRelationInput = {
    iddispositivo?: SortOrder
    nombre_dispositivo?: SortOrder
    salonesIdsalon?: SortOrder
    idsalon?: salonesOrderByWithRelationInput
  }

  export type dispositivosWhereUniqueInput = Prisma.AtLeast<{
    iddispositivo?: string
    AND?: dispositivosWhereInput | dispositivosWhereInput[]
    OR?: dispositivosWhereInput[]
    NOT?: dispositivosWhereInput | dispositivosWhereInput[]
    nombre_dispositivo?: StringFilter<"dispositivos"> | string
    salonesIdsalon?: IntFilter<"dispositivos"> | number
    idsalon?: XOR<SalonesRelationFilter, salonesWhereInput>
  }, "iddispositivo">

  export type dispositivosOrderByWithAggregationInput = {
    iddispositivo?: SortOrder
    nombre_dispositivo?: SortOrder
    salonesIdsalon?: SortOrder
    _count?: dispositivosCountOrderByAggregateInput
    _avg?: dispositivosAvgOrderByAggregateInput
    _max?: dispositivosMaxOrderByAggregateInput
    _min?: dispositivosMinOrderByAggregateInput
    _sum?: dispositivosSumOrderByAggregateInput
  }

  export type dispositivosScalarWhereWithAggregatesInput = {
    AND?: dispositivosScalarWhereWithAggregatesInput | dispositivosScalarWhereWithAggregatesInput[]
    OR?: dispositivosScalarWhereWithAggregatesInput[]
    NOT?: dispositivosScalarWhereWithAggregatesInput | dispositivosScalarWhereWithAggregatesInput[]
    iddispositivo?: StringWithAggregatesFilter<"dispositivos"> | string
    nombre_dispositivo?: StringWithAggregatesFilter<"dispositivos"> | string
    salonesIdsalon?: IntWithAggregatesFilter<"dispositivos"> | number
  }

  export type usuariosCreateInput = {
    nombre: string
    correo: string
    clave: string
    imagen: string
  }

  export type usuariosUncheckedCreateInput = {
    idusuario?: number
    nombre: string
    correo: string
    clave: string
    imagen: string
  }

  export type usuariosUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    clave?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosUncheckedUpdateInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    clave?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosCreateManyInput = {
    idusuario?: number
    nombre: string
    correo: string
    clave: string
    imagen: string
  }

  export type usuariosUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    clave?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosUncheckedUpdateManyInput = {
    idusuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    clave?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
  }

  export type salonesCreateInput = {
    idsalon: number
    nombre_salon: string
    dispositivos?: dispositivosCreateNestedManyWithoutIdsalonInput
  }

  export type salonesUncheckedCreateInput = {
    idsalon: number
    nombre_salon: string
    dispositivos?: dispositivosUncheckedCreateNestedManyWithoutIdsalonInput
  }

  export type salonesUpdateInput = {
    idsalon?: IntFieldUpdateOperationsInput | number
    nombre_salon?: StringFieldUpdateOperationsInput | string
    dispositivos?: dispositivosUpdateManyWithoutIdsalonNestedInput
  }

  export type salonesUncheckedUpdateInput = {
    idsalon?: IntFieldUpdateOperationsInput | number
    nombre_salon?: StringFieldUpdateOperationsInput | string
    dispositivos?: dispositivosUncheckedUpdateManyWithoutIdsalonNestedInput
  }

  export type salonesCreateManyInput = {
    idsalon: number
    nombre_salon: string
  }

  export type salonesUpdateManyMutationInput = {
    idsalon?: IntFieldUpdateOperationsInput | number
    nombre_salon?: StringFieldUpdateOperationsInput | string
  }

  export type salonesUncheckedUpdateManyInput = {
    idsalon?: IntFieldUpdateOperationsInput | number
    nombre_salon?: StringFieldUpdateOperationsInput | string
  }

  export type dispositivosCreateInput = {
    iddispositivo?: string
    nombre_dispositivo: string
    idsalon: salonesCreateNestedOneWithoutDispositivosInput
  }

  export type dispositivosUncheckedCreateInput = {
    iddispositivo?: string
    nombre_dispositivo: string
    salonesIdsalon: number
  }

  export type dispositivosUpdateInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
    idsalon?: salonesUpdateOneRequiredWithoutDispositivosNestedInput
  }

  export type dispositivosUncheckedUpdateInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
    salonesIdsalon?: IntFieldUpdateOperationsInput | number
  }

  export type dispositivosCreateManyInput = {
    iddispositivo?: string
    nombre_dispositivo: string
    salonesIdsalon: number
  }

  export type dispositivosUpdateManyMutationInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
  }

  export type dispositivosUncheckedUpdateManyInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
    salonesIdsalon?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type usuariosCountOrderByAggregateInput = {
    idusuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    clave?: SortOrder
    imagen?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    idusuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    clave?: SortOrder
    imagen?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    idusuario?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    clave?: SortOrder
    imagen?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    idusuario?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DispositivosListRelationFilter = {
    every?: dispositivosWhereInput
    some?: dispositivosWhereInput
    none?: dispositivosWhereInput
  }

  export type dispositivosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type salonesCountOrderByAggregateInput = {
    idsalon?: SortOrder
    nombre_salon?: SortOrder
  }

  export type salonesAvgOrderByAggregateInput = {
    idsalon?: SortOrder
  }

  export type salonesMaxOrderByAggregateInput = {
    idsalon?: SortOrder
    nombre_salon?: SortOrder
  }

  export type salonesMinOrderByAggregateInput = {
    idsalon?: SortOrder
    nombre_salon?: SortOrder
  }

  export type salonesSumOrderByAggregateInput = {
    idsalon?: SortOrder
  }

  export type SalonesRelationFilter = {
    is?: salonesWhereInput
    isNot?: salonesWhereInput
  }

  export type dispositivosCountOrderByAggregateInput = {
    iddispositivo?: SortOrder
    nombre_dispositivo?: SortOrder
    salonesIdsalon?: SortOrder
  }

  export type dispositivosAvgOrderByAggregateInput = {
    salonesIdsalon?: SortOrder
  }

  export type dispositivosMaxOrderByAggregateInput = {
    iddispositivo?: SortOrder
    nombre_dispositivo?: SortOrder
    salonesIdsalon?: SortOrder
  }

  export type dispositivosMinOrderByAggregateInput = {
    iddispositivo?: SortOrder
    nombre_dispositivo?: SortOrder
    salonesIdsalon?: SortOrder
  }

  export type dispositivosSumOrderByAggregateInput = {
    salonesIdsalon?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type dispositivosCreateNestedManyWithoutIdsalonInput = {
    create?: XOR<dispositivosCreateWithoutIdsalonInput, dispositivosUncheckedCreateWithoutIdsalonInput> | dispositivosCreateWithoutIdsalonInput[] | dispositivosUncheckedCreateWithoutIdsalonInput[]
    connectOrCreate?: dispositivosCreateOrConnectWithoutIdsalonInput | dispositivosCreateOrConnectWithoutIdsalonInput[]
    createMany?: dispositivosCreateManyIdsalonInputEnvelope
    connect?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
  }

  export type dispositivosUncheckedCreateNestedManyWithoutIdsalonInput = {
    create?: XOR<dispositivosCreateWithoutIdsalonInput, dispositivosUncheckedCreateWithoutIdsalonInput> | dispositivosCreateWithoutIdsalonInput[] | dispositivosUncheckedCreateWithoutIdsalonInput[]
    connectOrCreate?: dispositivosCreateOrConnectWithoutIdsalonInput | dispositivosCreateOrConnectWithoutIdsalonInput[]
    createMany?: dispositivosCreateManyIdsalonInputEnvelope
    connect?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
  }

  export type dispositivosUpdateManyWithoutIdsalonNestedInput = {
    create?: XOR<dispositivosCreateWithoutIdsalonInput, dispositivosUncheckedCreateWithoutIdsalonInput> | dispositivosCreateWithoutIdsalonInput[] | dispositivosUncheckedCreateWithoutIdsalonInput[]
    connectOrCreate?: dispositivosCreateOrConnectWithoutIdsalonInput | dispositivosCreateOrConnectWithoutIdsalonInput[]
    upsert?: dispositivosUpsertWithWhereUniqueWithoutIdsalonInput | dispositivosUpsertWithWhereUniqueWithoutIdsalonInput[]
    createMany?: dispositivosCreateManyIdsalonInputEnvelope
    set?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    disconnect?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    delete?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    connect?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    update?: dispositivosUpdateWithWhereUniqueWithoutIdsalonInput | dispositivosUpdateWithWhereUniqueWithoutIdsalonInput[]
    updateMany?: dispositivosUpdateManyWithWhereWithoutIdsalonInput | dispositivosUpdateManyWithWhereWithoutIdsalonInput[]
    deleteMany?: dispositivosScalarWhereInput | dispositivosScalarWhereInput[]
  }

  export type dispositivosUncheckedUpdateManyWithoutIdsalonNestedInput = {
    create?: XOR<dispositivosCreateWithoutIdsalonInput, dispositivosUncheckedCreateWithoutIdsalonInput> | dispositivosCreateWithoutIdsalonInput[] | dispositivosUncheckedCreateWithoutIdsalonInput[]
    connectOrCreate?: dispositivosCreateOrConnectWithoutIdsalonInput | dispositivosCreateOrConnectWithoutIdsalonInput[]
    upsert?: dispositivosUpsertWithWhereUniqueWithoutIdsalonInput | dispositivosUpsertWithWhereUniqueWithoutIdsalonInput[]
    createMany?: dispositivosCreateManyIdsalonInputEnvelope
    set?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    disconnect?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    delete?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    connect?: dispositivosWhereUniqueInput | dispositivosWhereUniqueInput[]
    update?: dispositivosUpdateWithWhereUniqueWithoutIdsalonInput | dispositivosUpdateWithWhereUniqueWithoutIdsalonInput[]
    updateMany?: dispositivosUpdateManyWithWhereWithoutIdsalonInput | dispositivosUpdateManyWithWhereWithoutIdsalonInput[]
    deleteMany?: dispositivosScalarWhereInput | dispositivosScalarWhereInput[]
  }

  export type salonesCreateNestedOneWithoutDispositivosInput = {
    create?: XOR<salonesCreateWithoutDispositivosInput, salonesUncheckedCreateWithoutDispositivosInput>
    connectOrCreate?: salonesCreateOrConnectWithoutDispositivosInput
    connect?: salonesWhereUniqueInput
  }

  export type salonesUpdateOneRequiredWithoutDispositivosNestedInput = {
    create?: XOR<salonesCreateWithoutDispositivosInput, salonesUncheckedCreateWithoutDispositivosInput>
    connectOrCreate?: salonesCreateOrConnectWithoutDispositivosInput
    upsert?: salonesUpsertWithoutDispositivosInput
    connect?: salonesWhereUniqueInput
    update?: XOR<XOR<salonesUpdateToOneWithWhereWithoutDispositivosInput, salonesUpdateWithoutDispositivosInput>, salonesUncheckedUpdateWithoutDispositivosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type dispositivosCreateWithoutIdsalonInput = {
    iddispositivo?: string
    nombre_dispositivo: string
  }

  export type dispositivosUncheckedCreateWithoutIdsalonInput = {
    iddispositivo?: string
    nombre_dispositivo: string
  }

  export type dispositivosCreateOrConnectWithoutIdsalonInput = {
    where: dispositivosWhereUniqueInput
    create: XOR<dispositivosCreateWithoutIdsalonInput, dispositivosUncheckedCreateWithoutIdsalonInput>
  }

  export type dispositivosCreateManyIdsalonInputEnvelope = {
    data: dispositivosCreateManyIdsalonInput | dispositivosCreateManyIdsalonInput[]
    skipDuplicates?: boolean
  }

  export type dispositivosUpsertWithWhereUniqueWithoutIdsalonInput = {
    where: dispositivosWhereUniqueInput
    update: XOR<dispositivosUpdateWithoutIdsalonInput, dispositivosUncheckedUpdateWithoutIdsalonInput>
    create: XOR<dispositivosCreateWithoutIdsalonInput, dispositivosUncheckedCreateWithoutIdsalonInput>
  }

  export type dispositivosUpdateWithWhereUniqueWithoutIdsalonInput = {
    where: dispositivosWhereUniqueInput
    data: XOR<dispositivosUpdateWithoutIdsalonInput, dispositivosUncheckedUpdateWithoutIdsalonInput>
  }

  export type dispositivosUpdateManyWithWhereWithoutIdsalonInput = {
    where: dispositivosScalarWhereInput
    data: XOR<dispositivosUpdateManyMutationInput, dispositivosUncheckedUpdateManyWithoutIdsalonInput>
  }

  export type dispositivosScalarWhereInput = {
    AND?: dispositivosScalarWhereInput | dispositivosScalarWhereInput[]
    OR?: dispositivosScalarWhereInput[]
    NOT?: dispositivosScalarWhereInput | dispositivosScalarWhereInput[]
    iddispositivo?: StringFilter<"dispositivos"> | string
    nombre_dispositivo?: StringFilter<"dispositivos"> | string
    salonesIdsalon?: IntFilter<"dispositivos"> | number
  }

  export type salonesCreateWithoutDispositivosInput = {
    idsalon: number
    nombre_salon: string
  }

  export type salonesUncheckedCreateWithoutDispositivosInput = {
    idsalon: number
    nombre_salon: string
  }

  export type salonesCreateOrConnectWithoutDispositivosInput = {
    where: salonesWhereUniqueInput
    create: XOR<salonesCreateWithoutDispositivosInput, salonesUncheckedCreateWithoutDispositivosInput>
  }

  export type salonesUpsertWithoutDispositivosInput = {
    update: XOR<salonesUpdateWithoutDispositivosInput, salonesUncheckedUpdateWithoutDispositivosInput>
    create: XOR<salonesCreateWithoutDispositivosInput, salonesUncheckedCreateWithoutDispositivosInput>
    where?: salonesWhereInput
  }

  export type salonesUpdateToOneWithWhereWithoutDispositivosInput = {
    where?: salonesWhereInput
    data: XOR<salonesUpdateWithoutDispositivosInput, salonesUncheckedUpdateWithoutDispositivosInput>
  }

  export type salonesUpdateWithoutDispositivosInput = {
    idsalon?: IntFieldUpdateOperationsInput | number
    nombre_salon?: StringFieldUpdateOperationsInput | string
  }

  export type salonesUncheckedUpdateWithoutDispositivosInput = {
    idsalon?: IntFieldUpdateOperationsInput | number
    nombre_salon?: StringFieldUpdateOperationsInput | string
  }

  export type dispositivosCreateManyIdsalonInput = {
    iddispositivo?: string
    nombre_dispositivo: string
  }

  export type dispositivosUpdateWithoutIdsalonInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
  }

  export type dispositivosUncheckedUpdateWithoutIdsalonInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
  }

  export type dispositivosUncheckedUpdateManyWithoutIdsalonInput = {
    iddispositivo?: StringFieldUpdateOperationsInput | string
    nombre_dispositivo?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SalonesCountOutputTypeDefaultArgs instead
     */
    export type SalonesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalonesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuariosDefaultArgs instead
     */
    export type usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuariosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use salonesDefaultArgs instead
     */
    export type salonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = salonesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use dispositivosDefaultArgs instead
     */
    export type dispositivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = dispositivosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}